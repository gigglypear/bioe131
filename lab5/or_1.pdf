%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Oct 10 06:54:43 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
gggcgagggugaugagcuugguugaguauuuacagcuccauacaugagguguucucccuacgcaaguucgaucaggcgaaacggugaaagccguagguugccc\
) } def
/len { sequence length } bind def

/coor [
[202.14192200 185.66165161]
[191.58482361 167.85046387]
[191.10592651 147.08120728]
[177.42742920 140.92501831]
[163.74893188 134.76882935]
[149.97901917 128.81993103]
[136.12081909 123.07967377]
[122.26263428 117.33942413]
[108.40443420 111.59917450]
[94.51846313 113.23359680]
[85.85530853 102.25901794]
[71.99711609 96.51876831]
[57.54228592 102.32356262]
[43.56988144 96.30471039]
[38.12497711 82.48847198]
[22.41434479 84.35570526]
[13.61681557 72.33685303]
[-0.24137719 66.59660339]
[-14.09957027 60.85635376]
[-32.20737457 63.74140549]
[-42.45164490 49.58142090]
[-56.47689056 44.26234818]
[-76.06345367 48.53107452]
[-87.89852905 33.36612320]
[-102.21933746 28.90357780]
[-116.54015350 24.44103241]
[-130.86096191 19.97848511]
[-143.92268372 28.57647514]
[-159.44915771 26.71566582]
[-170.10926819 15.27467442]
[-170.86961365 -0.34441254]
[-161.37120056 -12.76673985]
[-146.09889221 -16.12686348]
[-132.26379395 -8.83823776]
[-126.39842224 5.65767288]
[-112.07760620 10.12021828]
[-97.75679779 14.58276463]
[-83.43598175 19.04531097]
[-74.66475677 13.41567612]
[-64.02298737 13.63912964]
[-55.13287354 19.88666534]
[-51.15781784 30.23710632]
[-37.13257217 35.55617905]
[-25.86881638 30.86612892]
[-14.07550144 35.31414413]
[-8.35931873 46.99815750]
[5.49887419 52.73841095]
[19.35706711 58.47866058]
[34.07646942 56.20084381]
[43.86523056 68.63027191]
[57.48491669 62.71084213]
[71.62086487 68.33486176]
[77.73736572 82.66057587]
[91.59556580 88.40082550]
[105.48153687 86.76640320]
[114.14469147 97.74098206]
[128.00288391 103.48123169]
[141.86106873 109.22148132]
[155.71926880 114.96173859]
[165.01603699 115.37982941]
[169.90512085 121.09033203]
[183.58361816 127.24652100]
[197.26211548 133.40270996]
[204.09941101 125.85935974]
[212.57051086 120.23786163]
[222.15078735 116.87793732]
[232.24902344 115.97949219]
[242.24385071 117.59077454]
[251.52197266 121.60581207]
[259.51583862 127.77135468]
[265.73837280 135.70283508]
[269.81256104 144.90838623]
[271.49435425 154.81925964]
[270.68734741 164.82507324]
[267.44808960 174.31130981]
[279.52984619 183.20123291]
[291.61163330 192.09117126]
[303.69338989 200.98109436]
[315.77514648 209.87103271]
[335.78860474 211.01870728]
[343.11672974 228.80476379]
[355.71319580 236.94898987]
[368.30969238 245.09323120]
[380.90615845 253.23747253]
[393.50265503 261.38171387]
[409.89935303 261.66613770]
[417.61361694 276.13754272]
[408.70971680 289.90899658]
[392.34719849 288.81356812]
[385.35842896 273.97817993]
[372.76193237 265.83395386]
[360.16546631 257.68972778]
[347.56896973 249.54548645]
[334.97247314 241.40124512]
[325.01168823 244.46875000]
[314.82077026 241.39585876]
[307.93484497 232.99050903]
[306.88522339 221.95280457]
[294.80346680 213.06286621]
[282.72167969 204.17294312]
[270.63992310 195.28300476]
[258.55816650 186.39306641]
[240.57441711 196.22341919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[6 59]
[7 58]
[8 57]
[9 56]
[11 54]
[12 53]
[15 50]
[17 48]
[18 47]
[19 46]
[21 43]
[22 42]
[24 38]
[25 37]
[26 36]
[27 35]
[75 102]
[76 101]
[77 100]
[78 99]
[79 98]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
