%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Oct 10 06:54:47 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
gggcgagggugaugagcuugguugaguauuuacagcuccauacaugagguguucucccuacgcaaguucgaucaggcgaaacggugaaagccguagguugccc\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 217.70083618]
[92.50000000 202.70083618]
[92.50000000 187.70083618]
[92.50000000 172.70083618]
[92.50000000 157.70083618]
[92.50000000 142.70083618]
[82.32078552 139.58605957]
[73.20741272 134.08471680]
[65.70932007 126.52848053]
[60.27854538 117.37287903]
[57.24250412 107.16990662]
[56.78423309 96.53466797]
[58.93136215 86.10835266]
[63.55443954 76.51953888]
[70.37475586 68.34631348]
[78.98112488 62.08143234]
[74.08808136 47.90193558]
[69.19503784 33.72243881]
[64.30199432 19.54294205]
[59.40895462 5.36344385]
[54.51591110 -8.81605339]
[49.62287140 -22.99555016]
[44.72982788 -37.17504883]
[39.83678818 -51.35454559]
[34.94374466 -65.53404236]
[20.18701935 -62.70211792]
[5.17746592 -61.99919891]
[-9.77933788 -63.43960571]
[-24.37889290 -66.99400330]
[-38.32397079 -72.59004211]
[-51.33066559 -80.11377716]
[-63.13417816 -89.41204834]
[-73.49420166 -100.29555511]
[-82.19982910 -112.54270935]
[-89.07381439 -125.90418243]
[-93.97621918 -140.10795593]
[-96.80723572 -154.86486816]
[-97.50921631 -169.87445068]
[-96.06788635 -184.83117676]
[-92.51258087 -199.43051147]
[-86.91568756 -213.37524414]
[-79.39114380 -226.38146973]
[-70.09214020 -238.18440247]
[-59.20800018 -248.54376221]
[-46.96030426 -257.24862671]
[-33.59840012 -264.12179565]
[-19.39432335 -269.02331543]
[-4.63724661 -271.85342407]
[10.37239265 -272.55447388]
[25.32901955 -271.11221313]
[39.92813492 -267.55599976]
[53.87251663 -261.95825195]
[66.87828064 -254.43289185]
[78.68064117 -245.13316345]
[89.03932190 -234.24838257]
[97.74343109 -222.00013733]
[104.61576843 -208.63781738]
[109.51641083 -194.43344116]
[112.34559631 -179.67617798]
[113.04572296 -164.66650391]
[111.60254669 -149.70996094]
[108.04543304 -135.11106873]
[102.44680786 -121.16703033]
[94.92065430 -108.16173553]
[85.62019348 -96.35994720]
[74.73477173 -86.00193787]
[62.48599625 -77.29859161]
[49.12324142 -70.42708588]
[54.01628494 -56.24758530]
[58.90932465 -42.06808853]
[63.80236816 -27.88859177]
[68.69541168 -13.70909500]
[73.58844757 0.47040212]
[78.48149109 14.64989948]
[83.37453461 28.82939720]
[88.26757812 43.00889206]
[93.16062164 57.18839264]
[115.83541107 59.64097595]
[134.12792969 73.26247406]
[142.97592163 94.28327942]
[139.93081665 116.88613129]
[152.52729797 125.03036499]
[165.12377930 133.17460632]
[177.72026062 141.31883240]
[190.31675720 149.46307373]
[206.71342468 149.74749756]
[214.42771912 164.21891785]
[205.52381897 177.99035645]
[189.16130066 176.89494324]
[182.17251587 162.05955505]
[169.57603455 153.91531372]
[156.97955322 145.77108765]
[144.38305664 137.62684631]
[131.78657532 129.48262024]
[126.60550690 134.23095703]
[120.72532654 138.07980347]
[114.30055237 140.92805481]
[107.50000000 142.70083618]
[107.50000000 157.70083618]
[107.50000000 172.70083618]
[107.50000000 187.70083618]
[107.50000000 202.70083618]
[107.50000000 217.70083618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 99]
[6 98]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
