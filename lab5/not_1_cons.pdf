%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Oct 10 06:54:44 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ggcagguacauacagcugaugagucccaaaauaggacgaacgcgacacacaccacuaaaccgugcaguguuuugcguccuguauuccacugc\
) } def
/len { sequence length } bind def

/coor [
[68.02677917 322.39828491]
[70.86678314 303.22576904]
[71.37339783 288.23434448]
[71.88000488 273.24288940]
[72.38661957 258.25146484]
[59.67422485 250.48867798]
[52.50658798 237.31745911]
[52.89663315 222.22726440]
[60.83971405 209.27333069]
[74.28798676 201.98696899]
[74.79460144 186.99552917]
[75.30121613 172.00407410]
[75.80782318 157.01263428]
[76.31443787 142.02119446]
[76.82105255 127.02975464]
[72.45346832 141.37980652]
[60.21567917 150.05371094]
[45.22900772 149.42156982]
[33.76512527 139.74792480]
[30.62148285 125.08103943]
[37.11364746 111.55876923]
[50.52474594 104.83996582]
[65.24355316 107.73696899]
[51.77648544 101.13105774]
[38.30941772 94.52513885]
[24.84234810 87.91922760]
[10.61659431 94.41245270]
[-4.44085979 90.19260406]
[-13.22034454 77.25218201]
[-11.57645512 61.70124054]
[-0.28538591 50.88247299]
[15.32156563 49.90416336]
[27.87527275 59.22824097]
[31.44826126 74.45216370]
[44.91532898 81.05807495]
[58.38239670 87.66398621]
[71.84946442 94.26989746]
[81.87015533 81.06496429]
[96.28541565 76.59066772]
[109.19647980 80.91030884]
[120.06837463 70.57580566]
[130.94026184 60.24129868]
[141.81214905 49.90679550]
[152.68405151 39.57229233]
[144.80157471 26.74418449]
[139.75885010 12.55741310]
[137.77629089 -2.36784005]
[138.94059753 -17.37910652]
[143.20085144 -31.82015610]
[150.37081909 -45.05968857]
[160.13705444 -56.51893234]
[172.07263184 -65.69692993]
[185.65577698 -72.19246674]
[200.29267883 -75.72158813]
[215.34349060 -76.13000488]
[230.15023804 -73.39987183]
[244.06565857 -67.65053558]
[256.48141479 -59.13333511]
[266.85473633 -48.22060013]
[274.73217773 -35.38939285]
[279.76931763 -21.20063591]
[281.74600220 -6.27460480]
[280.57580566 8.73620129]
[276.30984497 23.17557335]
[269.13467407 36.41228485]
[259.36392212 47.86768341]
[247.42474365 57.04098892]
[233.83905029 63.53118515]
[219.20075989 67.05454254]
[204.14979553 67.45703888]
[189.34410095 64.72108459]
[175.43095398 58.96627045]
[163.01855469 50.44418335]
[152.14666748 60.77868652]
[141.27476501 71.11318970]
[130.40287781 81.44769287]
[119.53098297 91.78219604]
[118.58574677 116.65840149]
[91.81249237 127.53636169]
[91.30587769 142.52780151]
[90.79927063 157.51925659]
[90.29265594 172.51069641]
[89.78604126 187.50213623]
[89.27943420 202.49357605]
[102.20512390 210.67121887]
[109.25556946 224.13182068]
[108.62599182 239.21392822]
[100.58551788 251.87121582]
[87.37805939 258.75805664]
[86.87145233 273.74951172]
[86.36483765 288.74093628]
[85.85822296 303.73239136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[5 89]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[23 37]
[24 36]
[25 35]
[26 34]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
